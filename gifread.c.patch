--- src/gifread.c	2009-10-26 13:42:03.000000000 +0100
+++ src/gifread.c	2013-11-21 21:56:27.728946596 +0100
@@ -27,6 +27,9 @@
 
 #include <gif_lib.h>
 
+static int error;
+#define PrintGifError() (fprintf(stderr, GifErrorString(error)))
+
 value Val_GifColorType( GifColorType *color )
 {
   CAMLparam0();
@@ -56,7 +59,7 @@
 #ifdef DEBUG_GIF
     fprintf(stderr, "Colormap(%d)...\n", colorMap->ColorCount);
     fflush(stderr);
-#endif 
+#endif
 
     cmap = alloc_tuple(colorMap->ColorCount);
     for(i= 0; i< colorMap->ColorCount; i++){
@@ -66,7 +69,7 @@
 #ifdef DEBUG_GIF
     fprintf(stderr, "Colormap(0)...\n");
     fflush(stderr);
-#endif 
+#endif
     cmap = Atom(0); /* cmap = alloc_tuple(0); is WRONG!! */
   }
   CAMLreturn(cmap);
@@ -140,7 +143,7 @@
   GifFileType *GifFile;
   int i;
 
-  if((GifFile = DGifOpenFileName( String_val(name) )) == NULL){
+  if((GifFile = DGifOpenFileName( String_val(name), &error )) == NULL){
     failwith("DGifOpenFileName");
   }
 
@@ -150,16 +153,16 @@
   for(i=0; i<2; i++) Field(res, i) = r[i];
 
   CAMLreturn(res);
-} 
+}
 
 value dGifCloseFile( value hdl )
 {
   CAMLparam1(hdl);
 
   /* For the bug libungif/giflib 4.1.0 */
-  /* This may add a new memory leak, but it is better than having 
+  /* This may add a new memory leak, but it is better than having
      segmentation faults */
-  ((GifFileType *)hdl)->Image.ColorMap = NULL; 
+  ((GifFileType *)hdl)->Image.ColorMap = NULL;
 
   DGifCloseFile( (GifFileType *) hdl );
   CAMLreturn(Val_unit);
@@ -196,9 +199,9 @@
   if( oversized( GifFile->Image.Width, sizeof(GifPixelType) ) ){
     failwith_oversized("gif");
   }
-  buf = alloc_string( GifFile->Image.Width * sizeof(GifPixelType) ); 
+  buf = alloc_string( GifFile->Image.Width * sizeof(GifPixelType) );
 
-  if( DGifGetLine(GifFile, String_val(buf), GifFile->Image.Width ) 
+  if( DGifGetLine(GifFile, String_val(buf), GifFile->Image.Width )
       == GIF_ERROR ){
     PrintGifError ();
     failwith("DGifGetLine");
